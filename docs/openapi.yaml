openapi: 3.0.3
info:
  title: Skakel API Documentation
  description: |-
    The Skakel API is used to send data across devices and persist them into the cloud database. It supports various functionalities like video calls, file upload, payment validation, and more. The ultimate goal is to have decentralized backend implementations across the web for each user.

    Useful Links:
    - [Skakel Mobile App Repository](https://github.com/vymalo/skakel-mobile-app)
    - [Skakel Server App Repository](https://github.com/vymalo/skakel-server)
  termsOfService: https://swagger.io/terms/
  contact:
    email: dev@vymalo.com
  license:
    name: MIT
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://{env_name}.apps.ssegning.com/api
    description: The API server
    variables:
      env_name:
        enum:
          - skakel
          - skakel-dev
          - skakel-staging
        default: skakel
        description: The environment name
tags:
  - name: user
    description: Operations related to users
  - name: chat
    description: Operations related to chats
  - name: chat-message
    description: Operations related to chat messages
  - name: call
    description: Operations related to calls
  - name: attachment
    description: Operations related to attachments
  - name: payment
    description: Operations related to payment transactions
  - name: order
    description: Operations related to orders
  - name: product
    description: Operations related to products
  - name: user-settings
    description: Operations related to user settings
  - name: chat-reaction
    description: Operations related to chat reactions
  - name: association
    description: Operations related to associations

paths:
  /users:
    get:
      security:
        - oauth2: [ ]
      tags:
        - user
      summary: Get all users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      security:
        - oauth2: [ ]
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: User object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - user
      summary: Get a user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      security:
        - oauth2: [ ]
      tags:
        - user
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      security:
        - oauth2: [ ]
      tags:
        - user
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

  /users/{id}/settings:
    get:
      security:
        - oauth2: [ ]
      tags:
        - user-settings
      summary: Get user settings by user ID
      operationId: getUserSettingsById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '404':
          description: User settings not found

    put:
      security:
        - oauth2: [ ]
      tags:
        - user-settings
      summary: Update user settings
      operationId: updateUserSettings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User settings object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsInfo'
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '404':
          description: User settings not found

  /chats:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat
      summary: Get all chats
      operationId: getAllChats
      responses:
        '200':
          description: A list of chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
    post:
      security:
        - oauth2: [ ]
      tags:
        - chat
      summary: Create a new chat
      operationId: createChat
      requestBody:
        description: Chat object that needs to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInfo'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'

  /chats/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat
      summary: Get a chat by ID
      operationId: getChatById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '404':
          description: Chat not found

    put:
      security:
        - oauth2: [ ]
      tags:
        - chat
      summary: Update an existing chat
      operationId: updateChat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Chat object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatInfo'
      responses:
        '200':
          description: Chat updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '404':
          description: Chat not found

    delete:
      security:
        - oauth2: [ ]
      tags:
        - chat
      summary: Delete a chat by ID
      operationId: deleteChat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat deleted successfully
        '404':
          description: Chat not found

  /chats-messages:
    post:
      security:
        - oauth2: [ ]
      tags:
        - chat-message
      summary: Send a message to a chat
      operationId: sendMessageToChat
      requestBody:
        required: true
        description: ChatMessage object that needs to be sent
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageInfo'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
  /chats-members:
    post:
      security:
        - oauth2: [ ]
      tags:
        - chat-member
      summary: Add a member to a chat
      operationId: addMemberToChat
      requestBody:
        description: User object that needs to be added as a member
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMemberInfo'
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
        '404':
          description: Chat or user not found
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-member
      summary: Get chat members by chat ID
      operationId: getChatMembersByChatId
      parameters:
        - name: chatId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
        '404':
          description: Chat or user not found
  /chats-members/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-member
      summary: Get a chat member by ID
      operationId: getChatMemberById
      parameters:
        - name: id
          description: Chat member ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat member retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
        '404':
          description: Chat or member not found
    put:
      security:
        - oauth2: [ ]
      tags:
        - chat-member
      summary: Update an existing chat member
      operationId: updateChatMember
      parameters:
        - name: id
          description: Chat member ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ChatMember object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMemberInfo'
      responses:
        '200':
          description: Chat member retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMember'
        '404':
          description: Chat or member not found
    delete:
      security:
        - oauth2: [ ]
      tags:
        - chat-member
      summary: Remove a member from a chat
      operationId: removeMemberFromChat
      parameters:
        - name: id
          description: Chat member ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Member removed successfully
        '404':
          description: Chat or member not found
  /chat-messages:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-message
      summary: Get all chat messages
      operationId: getAllChatMessages
      responses:
        '200':
          description: A list of chat messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'

  /chat-messages/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-message
      summary: Get a chat message by ID
      operationId: getChatMessageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat message retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '404':
          description: Chat message not found

    put:
      security:
        - oauth2: [ ]
      tags:
        - chat-message
      summary: Update an existing chat message
      operationId: updateChatMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ChatMessage object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageInfo'
      responses:
        '200':
          description: Chat message updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '404':
          description: Chat message not found

    delete:
      security:
        - oauth2: [ ]
      tags:
        - chat-message
      summary: Delete a chat message by ID
      operationId: deleteChatMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chat message deleted successfully
        '404':
          description: Chat message not found

  /chat-reactions:
    post:
      security:
        - oauth2: [ ]
      tags:
        - chat-reaction
      summary: Add a reaction to a chat message
      operationId: addReactionToChatMessage
      requestBody:
        description: Reaction object that needs to be added to the chat message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatReaction'
      responses:
        '200':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatReaction'
        '404':
          description: Chat message not found
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-reaction
      summary: Get reactions from a chat message
      operationId: getReactionsFromChatMessage
      parameters:
        - name: chatId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reaction added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatReaction'
        '404':
          description: Chat message not found
  /chat-reactions/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - chat-reaction
      summary: Remove a reaction from a chat message
      operationId: getReactionFromChatMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Reaction removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatReaction'
        '404':
          description: Chat message or reaction not found/calls
    put:
      security:
        - oauth2: [ ]
      tags:
        - chat-reaction
      summary: Put a reaction from a chat message
      operationId: putReactionFromChatMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Reaction object that needs to be added to the chat message
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatReactionInfo'
      responses:
        '204':
          description: Reaction removed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatReaction'
        '404':
          description: Chat message or reaction not found/calls
    delete:
      security:
        - oauth2: [ ]
      tags:
        - chat-reaction
      summary: Remove a reaction from a chat message
      operationId: removeReactionFromChatMessage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Reaction removed successfully
        '404':
          description: Chat message or reaction not found/calls
  /calls:
    get:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: Get calls by query parameters
      operationId: getCallsByQuery
      parameters:
        - name: userId
          in: query
          description: ID of the user associated with the calls
          required: false
          schema:
            type: string
        - name: callType
          in: query
          description: Type of calls (e.g., Video, Audio)
          required: false
          schema:
            type: string
            enum:
              - Video
              - Audio
        - name: startTime
          in: query
          description: Start time for filtering calls (format yyyy-mm-ddTHH:mm:ssZ)
          required: false
          schema:
            type: string
            format: date-time
        - name: endTime
          in: query
          description: End time for filtering calls (format yyyy-mm-ddTHH:mm:ssZ)
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: A list of calls matching the query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Call'
    post:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: Initiate a new call
      operationId: initiateCall
      requestBody:
        description: Call object that needs to be initiated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Call'
      responses:
        '201':
          description: Call initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'

  /calls/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: Get a call by ID
      operationId: getCallById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Call retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'
        '404':
          description: Call not found

    delete:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: End a call by ID
      operationId: endCall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Call ended successfully
        '404':
          description: Call not found

  /calls/{id}/participants:
    post:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: Invite a participant to a call
      operationId: inviteParticipantToCall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User object that needs to be invited as a participant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Participant invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Call'

  /calls/{id}/participants/{userId}:
    delete:
      security:
        - oauth2: [ ]
      tags:
        - call
      summary: Remove a participant from a call
      operationId: removeParticipantFromCall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Participant removed successfully
        '404':
          description: Call or participant not found
  /attachments:
    get:
      security:
        - oauth2: [ ]
      tags:
        - attachment
      summary: Get attachments by query parameters
      operationId: getAttachmentsByQuery
      parameters:
        - name: chatId
          in: query
          description: ID of the chat associated with the attachments
          required: false
          schema:
            type: string
        - name: userId
          in: query
          description: ID of the user associated with the attachments
          required: false
          schema:
            type: string
        - name: attachmentType
          in: query
          description: Type of attachments (e.g., image, document, video)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of attachments matching the query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'

    post:
      security:
        - oauth2: [ ]
      tags:
        - attachment
      summary: Upload a new attachment
      operationId: uploadAttachment
      requestBody:
        description: Attachment data to be uploaded
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Attachment uploaded successfully
          headers:
            Location:
              description: The URL of the uploaded attachment
              schema:
                type: string
                format: uri

  /attachments/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - attachment
      summary: Get an attachment by ID
      operationId: getAttachmentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Attachment retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Attachment not found

    delete:
      security:
        - oauth2: [ ]
      tags:
        - attachment
      summary: Delete an attachment by ID
      operationId: deleteAttachment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Attachment deleted successfully
        '404':
          description: Attachment not found
  /payment/transactions:
    post:
      security:
        - oauth2: [ ]
      tags:
        - payment
      summary: Initiate a new payment transaction
      operationId: initiatePaymentTransaction
      requestBody:
        description: Payment information for the transaction
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTransactionInfo'
      responses:
        '200':
          description: Payment transaction initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransaction'

  /payment/transactions/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - payment
      summary: Get a payment transaction by ID
      operationId: getPaymentTransactionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment transaction retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransaction'
        '404':
          description: Payment transaction not found

  /payment/transactions/{id}/confirm:
    post:
      security:
        - oauth2: [ ]
      tags:
        - payment
      summary: Confirm a payment transaction by ID
      operationId: confirmPaymentTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment transaction confirmed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransaction'
        '404':
          description: Payment transaction not found

  /payment/transactions/{id}/cancel:
    post:
      security:
        - oauth2: [ ]
      tags:
        - payment
      summary: Cancel a payment transaction by ID
      operationId: cancelPaymentTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment transaction canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTransaction'
        '404':
          description: Payment transaction not found
  /orders:
    get:
      security:
        - oauth2: [ ]
      tags:
        - order
      summary: Get orders by query parameters
      operationId: getOrdersByQuery
      parameters:
        - name: userId
          in: query
          description: ID of the user who placed the orders
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Status of the orders (e.g., pending, shipped, delivered)
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for filtering orders (format yyyy-mm-dd)
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for filtering orders (format yyyy-mm-dd)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of orders matching the query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      security:
        - oauth2: [ ]
      tags:
        - order
      summary: Place a new order
      operationId: placeOrder
      requestBody:
        description: Order details for placing the order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInfo'
      responses:
        '201':
          description: Order placed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - order
      summary: Get an order by ID
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /orders/{id}/cancel:
    post:
      security:
        - oauth2: [ ]
      tags:
        - order
      summary: Cancel an order by ID
      operationId: cancelOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
  /products:
    get:
      security:
        - oauth2: [ ]
      tags:
        - product
      summary: Get products by query parameters
      operationId: getProductsByQuery
      parameters:
        - name: category
          in: query
          description: Category of the products (e.g., electronics, clothing)
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price of the products
          required: false
          schema:
            type: integer
            format: float
        - name: maxPrice
          in: query
          description: Maximum price of the products
          required: false
          schema:
            type: integer
            format: float
        - name: inStock
          in: query
          description: Filter products that are in stock
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A list of products matching the query parameters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      security:
        - oauth2: [ ]
      tags:
        - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: Product details for adding the product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInfo'
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - product
      summary: Get a product by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      security:
        - oauth2: [ ]
      tags:
        - product
      summary: Delete a product by ID
      operationId: deleteProductById
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
  /associations:
    post:
      security:
        - oauth2: [ ]
      tags:
        - association
      summary: Add an association by ID
      operationId: addAssociation
      requestBody:
        description: Association details for adding the association
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationInfo'
      responses:
        '200':
          description: Association retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: Association not found
    get:
      security:
        - oauth2: [ ]
      tags:
        - association
      summary: Get all Associations
      operationId: queryAssociations
      responses:
        '204':
          description: Association deleted successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
  /associations/{id}:
    get:
      security:
        - oauth2: [ ]
      tags:
        - association
      summary: Get a association by ID
      operationId: getAssociationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Association retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: Association not found
    put:
      security:
        - oauth2: [ ]
      tags:
        - association
      summary: Update a association by ID
      operationId: updateAssociationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Association details for adding the association
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociationInfo'
      responses:
        '200':
          description: Association updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Association'
        '404':
          description: Association not found
    delete:
      security:
        - oauth2: [ ]
      tags:
        - association
      summary: Delete an Association by ID
      operationId: deleteAssociationById
      responses:
        '204':
          description: Association deleted successfully
        '404':
          description: Association not found
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
components:
  schemas:
    Base:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        version:
          type: integer
        syncStatus:
          $ref: "#/components/schemas/SyncStatus"
    AssociationInfo:
      type: object
      properties:
        id:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/AssociationMember"
        description:
          type: string
        name:
          type: string
        chatId:
          type: string
      required:
        - name
        - description
        - chatId
        - members
    AssociationRole:
      type: string
      enum:
        - Admin
        - Member
    AssociationMemberInfo:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        associationId:
          type: string
        role:
          $ref: "#/components/schemas/AssociationRole"
    AssociationMember:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AssociationMemberInfo"
    Association:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AssociationInfo"
    SyncStatus:
      type: string
      enum:
        - Synced
        - Updated
        - Deleted
    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        phoneNumber:
          type: string
        profilePicture:
          type: string
      required:
        - username
    User:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/UserInfo"
    ChatInfo:
      type: object
      properties:
        name:
          type: string
        members:
          type: array
          items:
            $ref: "#/components/schemas/ChatMember"
        chatType:
          $ref: "#/components/schemas/ChatType"
      required:
        - name
        - members
        - chatType
    Chat:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ChatInfo"
    ChatMemberInfo:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        chatId:
          type: string
      required:
        - userId
        - chatId
    ChatMember:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ChatMemberInfo"
    ChatType:
      type: string
      enum:
        - Simple
        - Group
    ChatMessageInfo:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        authorId:
          type: string
        chatId:
          type: string
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
        reactions:
          type: array
          items:
            $ref: "#/components/schemas/ChatReaction"
      required:
        - content
        - authorId
        - chatId
    ChatMessage:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ChatMessageInfo"
    ReactionType:
      type: string
      enum:
        - Emoji
    ChatReactionInfo:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        messageId:
          type: string
        reactionType:
          $ref: "#/components/schemas/ReactionType"
        content:
          type: string
      required:
        - userId
        - messageId
        - reactionType
    ChatReaction:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ChatReactionInfo"
      required:
        - id
        - userId
        - messageId
        - reactionType
    CallInfo:
      type: object
      properties:
        id:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        participants:
          type: array
          items:
            $ref: "#/components/schemas/User"
        callType:
          type: string
          enum:
            - Video
            - Audio
        initiator:
          $ref: "#/components/schemas/User"
      required:
        - startTime
        - participants
        - callType
        - initiator
    Call:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/CallInfo"
    AttachmentInfo:
      type: object
      properties:
        id:
          type: string
        attachmentType:
          $ref: "#/components/schemas/AttachmentType"
        url:
          type: string
        message:
          $ref: "#/components/schemas/ChatMessage"
      required:
        - type
        - url
        - message
    Attachment:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/AttachmentInfo"
    AttachmentType:
      type: string
      enum:
        - image
        - video
        - audio
        - file
        - location
        - contact
        - sticker
        - link
        - poll
        - other
    PaymentTransactionInfo:
      type: object
      properties:
        id:
          type: string
        amount:
          type: integer
          format: decimal
        currency:
          type: string
        timestamp:
          type: string
          format: date-time
        sender:
          $ref: "#/components/schemas/User"
        recipient:
          $ref: "#/components/schemas/User"
        type:
          type: string
          enum:
            - CreditCard
            - PayPal
            - ApplePay
            - GooglePay
            - BankTransfer
        reason:
          type: string
        status:
          type: string
          enum:
            - Pending
            - Completed
            - Failed
      required:
        - amount
        - currency
        - sender
        - recipient
        - type
        - reason
        - status
    PaymentTransaction:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/PaymentTransactionInfo"
    OrderInfo:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        totalAmount:
          type: integer
          format: decimal
        timestamp:
          type: string
          format: date-time
        status:
          type: string
        buyer:
          $ref: "#/components/schemas/User"
        seller:
          $ref: "#/components/schemas/User"
      required:
        - items
        - totalAmount
        - buyer
        - seller
    Order:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/OrderInfo"
    ProductInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: decimal
        seller:
          $ref: "#/components/schemas/User"
        content:
          type: object
        productType:
          type: string
      required:
        - name
        - price
        - seller
    Product:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/ProductInfo"
    UserSettingsInfo:
      type: object
      properties:
        id:
          type: string
        user:
          $ref: "#/components/schemas/User"
        language:
          type: string
        theme:
          type: string
        notifications:
          type: boolean
        blockedUsers:
          type: array
          items:
            $ref: "#/components/schemas/BlockedUser"
      required:
        - user
    UserSettings:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/UserSettingsInfo"
    OrderItemInfo:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        orderId:
          type: string
        quantity:
          type: integer
        notes:
          type: string
      required:
        - productId
        - quantity
        - orderId
    OrderItem:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/OrderItemInfo"
    BlockedUserInfo:
      type: object
      properties:
        id:
          type: string
        userSettingId:
          type: string
        blockedUserId:
          type: string
      required:
        - userSettingId
        - blockedUserId
    BlockedUser:
      allOf:
        - $ref: "#/components/schemas/Base"
        - $ref: "#/components/schemas/BlockedUserInfo"

  securitySchemes:
    oauth2:
      type: http
      scheme: bearer
      bearerFormat: JWT
